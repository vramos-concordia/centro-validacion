---
import Layout from "../layouts/Layout.astro";
import { AES, enc } from 'crypto-ts';
import { configEnv } from '../lib/vars';
import {v4 as uuidv4} from 'uuid';
import { connect } from '@planetscale/database';

import Barrita from "../components/Barrita.astro";


return Astro.redirect('/f/datos-personales');

const comunas = [
  'Santiago', 
  'Cerrillos', 
  'Cerro Navia', 
  'Conchalí', 
  'El Bosque', 
  'Estación Central', 
  'Huechuraba', 
  'Independencia', 
  'La Cisterna', 
  'La Florida', 
  'La Granja', 
  'La Pintana', 
  'La Reina', 
  'Las Condes', 
  'Lo Barnechea', 
  'Lo Espejo', 
  'Lo Prado', 
  'Macul', 
  'Maipú', 
  'Ñuñoa', 
  'Pedro Aguirre Cerda', 
  'Peñalolén', 
  'Providencia', 
  'Pudahuel', 
  'Quilicura', 
  'Quinta Normal', 
  'Recoleta', 
  'Renca',
  'San Joaquín',
  'San Miguel',
  'San Ramón',
  'Vitacura',
  'Puente Alto',
  'San Bernardo',
];

const config = {
  host: configEnv.DATABASE_HOST,
  username: configEnv.DATABASE_USERNAME,
  password: configEnv.DATABASE_PASSWORD,
  fetch: (url: any, init: any) => {
    delete init['cache']
    return fetch(url, init)
  }
}

let errorMsgRunError = '';
let obj : {[key: string]: any} = {};
obj.sessionId = uuidv4();
obj.estadoEmail = false;
obj.estadoFrontal = 0;
obj.estadoPosterior = 0;
obj.estadoFoto = 0;
obj.intentos = 0;
obj.rechazada = 0;
obj.errorCodigo = false;
obj.emailNoVerificado = false;

obj.rut = '';
obj.existe = false;

obj.finalizado = false;


let showBtn = false;
let existe = false;

if ( Astro.cookies.has('payload') ) {
  //recuperar valores de la cookie
  let encrypted = Astro.cookies.get('payload')?.value as string;
  let decrypted = AES.decrypt(encrypted, configEnv.SECRET_KEY);
  obj = JSON.parse(decrypted.toString(enc.Utf8).toString());
  console.log('cookieIndex', {obj});

  if ( obj.existe === true ) {
    return Astro.redirect('/recuperar');
  }
}

if (Astro.request.method === "POST") {
  const data = await Astro.request.formData();
  console.log(data);
  const mode = data.get('mode');

  if ( mode === 'verificarRun') {
    obj.rut = data.get('rut') as string;

    //validar si rut existe en la postulant.
    const conn = connect(config);

    const query = `select * from ndb_lista where run = :run`;
    const params = {
      run: obj.rut.split('-')[0].replaceAll('.', ''),
    }
    const result = await conn.execute(query, params);
    if ( result.rows.length > 0 ) {
      const row: any = result.rows[0];
      obj.existe = true;
      let encrypted = AES.encrypt(JSON.stringify(obj), configEnv.SECRET_KEY).toString();
      Astro.cookies.set('payload', encrypted, { path: '/', httpOnly: true, secure: true, sameSite: 'lax' });

      return Astro.redirect('/aviso');
    } else {
      const query = `select * from ndb_postulant where run = :run`;
      const params = {
        run: obj.rut.split('-')[0].replaceAll('.', ''),
      }
      const result = await conn.execute(query, params);
      if ( result.rows.length > 0 ) {
        const row: any = result.rows[0];
        obj.existe = true;
        let encrypted = AES.encrypt(JSON.stringify(obj), configEnv.SECRET_KEY).toString();
        Astro.cookies.set('payload', encrypted, { path: '/', httpOnly: true, secure: true, sameSite: 'lax' });

        return Astro.redirect('/recuperar');
      } else {
        let encrypted = AES.encrypt(JSON.stringify(obj), configEnv.SECRET_KEY).toString();
        Astro.cookies.set('payload', encrypted, { path: '/', httpOnly: true, secure: true, sameSite: 'lax' });
      }
    }    
  } else {
    obj.pregunta6 = data.get('pregunta6');
    let encrypted = AES.encrypt(JSON.stringify(obj), configEnv.SECRET_KEY).toString();
    Astro.cookies.set('payload', encrypted, { path: '/', httpOnly: true, secure: true, sameSite: 'lax' });
    return Astro.redirect('/f/datos-personales');
  }
}

---
<Layout title="Bienvenida">
  <div class="box">
    <p>        
      Hola! Te damos la bienvenida al formulario de postulación para el Diplomado en Competencias Digitales para el Empleo,
      exclusivo para las mujeres de las 34 comunas urbanas de la región metropolitana.
    </p>
    <p>
      Antes de que iniciemos, es importante asegurarnos de que dispones de las herramientas y habilidades necesarias para realizar el Diplomado. 
      Necesitarás al menos un computador de escritorio o notebook, conexión a internet y un nivel básico de habilidades digitales.
    </p>
    <p>
    Si tienes alguna pregunta o inquietud acerca del proceso de postulación, no dudes en contactarnos a través de nuestro call center +56 22 582 8796.
    </p>
  </div>
  <form id="frmIndex" method="POST">
    <input type="hidden" id="mode" name="mode" value="" />
    <div class="box">
      <div class="field">
        <label class="label" for="rut"><Barrita />Ingrese su RUN</label>
        <div class="input-group flex-nowrap">
          <span class="input-group-text" id="addon-wrapping"><img src="/static/assets/img/person.svg" alt=""/></span>
          { obj.rut === '' && <input type="text" id="rut" name="rut" class="form-control" placeholder="Ej. 11111111-1" value={obj.rut} required /> }
          { obj.rut !== '' && <input type="text" id="rut" name="rut" class="form-control" placeholder="Ej. 11111111-1" value={obj.rut} required disabled/> }
        </div>
    
        <div id="txtRunNoValido" class="alert alert-danger d-none">RUN no válido</div>
        {errorMsgRunError && 
          <p class="alert alert-danger"><Fragment set:html={errorMsgRunError} /></p>
        }
      </div>

      {
        obj.rut === '' && 
        <div class="mt-3">
          <div class="field">
            <div class="control row">
              <div class="col-12" style="text-align: right">
                <button type="submit" class="btn btn-primary">&raquo; Continuar</button>
              </div>
            </div>
          </div>
        </div>
      }

    </div>
    
    <div class="box mb-3">
      <div class="field">
        <div class="control row">
          <div class="col-6">
            <p>
              <a href="/limpiar" class="btn btn-danger">&raquo; Limpiar</a>
            </p>
          </div>
          <div class="col-6" style="text-align: right">
            {showBtn ? 
            <button id="btnSubmit1" type="submit" class="btn btn-primary">&raquo; Continuar</button> :
            <button id="btnSubmit1" type="submit" class="btn btn-primary" disabled>&raquo; Continuar</button>
            }
          </div>
        </div>
      </div>
    </div>
    
  </form>
  <script>
    import {  validate, format } from 'rut.js';
    const loadingDiv = document.getElementById('loading') as HTMLElement;
    function showSpinner() { loadingDiv.style.visibility = 'visible'; }
    function hideSpinner() { loadingDiv.style.visibility = 'hidden'; }

    document.addEventListener('DOMContentLoaded', () => {
      const inputRut = document.getElementById('rut') as HTMLInputElement;
      if ( inputRut !== null ) {
        inputRut.addEventListener('keyup', function() {
          if ( inputRut.value.length > 2 ) {
            let rutFormateado = format(inputRut.value);
            inputRut.value = rutFormateado;
          }
        });

        inputRut.addEventListener('blur', function() {
          if ( inputRut.value.length > 0 ) {
            if ( validate(inputRut.value) === false ) {
              document.getElementById('txtRunNoValido')?.classList.remove("d-none");
              inputRut.focus();
            } else {
              //revisar si existe....
              showSpinner();
              (document.getElementById('mode') as HTMLInputElement).value = 'verificarRun';
              (document.getElementById('frmIndex') as HTMLFormElement).submit();
            }
          }
        });
      }

      const elements = document.querySelectorAll<HTMLInputElement>('.pp');

      elements.forEach(element => {
        element.addEventListener('change', async function(){
          //console.log(element.id, element.value);

          (document.getElementById('mode') as HTMLInputElement).value = 'options';
          showSpinner();

          const frm = document.getElementById('frmIndex') as HTMLFormElement;
          const formData = new FormData(frm);

          /*for (var [key, value] of formData.entries()) { 
            console.log(key, value);
          }*/

          await fetch("/api/preguntas", {
            method: "POST",
            body: formData,
          });

          //console.log(await response.text());


          const divAlert = document.getElementById(`alert_${element.id}`) as HTMLElement;
          if ( element.value === '2') {
            divAlert.classList.remove('d-none');
          } else {
            divAlert.classList.add('d-none');
          }

          let allOptionsOneSelected = true;
          elements.forEach(element1 => {
            console.log('--> ', element1.id, element1.value);
            if ( element1.value === '2' || element1.value === '') {
              allOptionsOneSelected = false;
            }
          });

          console.log({allOptionsOneSelected});

          const btn = document.getElementById('btnSubmit1') as HTMLButtonElement;
          btn.disabled = !allOptionsOneSelected;

          hideSpinner();
        });
      });

      if ( inputRut.value === '') {
        inputRut.focus();
      }
      

      if ( document.getElementById('btnSubmit1') ) {

        (document.getElementById("btnSubmit1") as HTMLInputElement).addEventListener('click', function(event) {
          //event.preventDefault();
          /*const frm = (document.getElementById('frm') as HTMLFormElement);
          frm.reportValidity();
          frm.classList.add('was-validated')

          if (frm.checkValidity() === true ) {
            frm.submit();
          }*/

        });
      }


    });
  </script>
</Layout>