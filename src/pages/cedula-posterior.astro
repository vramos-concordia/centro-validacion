---
import { AES, enc } from 'crypto-ts';
import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';
import { connect } from '@planetscale/database';
import { configEnv } from '../lib/vars';

const config = {
  host: configEnv.DATABASE_HOST,
  username: configEnv.DATABASE_USERNAME,
  password: configEnv.DATABASE_PASSWORD,
  fetch: (url: any, init: any) => {
    delete init['cache']
    return fetch(url, init)
  }
}

let obj : {[key: string]: any} = {};

if ( Astro.cookies.has('payload') ) {
  let encrypted = Astro.cookies.get('payload')?.value as string;
  let decrypted = AES.decrypt(encrypted, configEnv.SECRET_KEY);
  obj = JSON.parse(decrypted.toString(enc.Utf8).toString());
  console.log({obj});
} else {
  return Astro.redirect('/');
}

if (Astro.request.method === "POST") {

  try {
    const data = await Astro.request.formData();
    const mrz = data.get('mrz') as string;

    //console.log(data);

    const S3 = new S3Client({
      region: 'auto',
      endpoint: configEnv.R2_ENDPOINT,
      credentials: {
        accessKeyId: configEnv.R2_ACCESS_KEY_ID,
        secretAccessKey: configEnv.R2_SECRET_ACCESS_KEY,
      },
    });

    const keyRut = obj.rut.split('-')[0].replaceAll('.', '');

    const file = data.get("file") as File;
    const buffer = (await file.arrayBuffer()) as any;

    const result = await S3.send(
      new PutObjectCommand({
        Body: buffer,
        Bucket: configEnv.R2_BUCKET,
        Key: `${keyRut}/posterior.jpg`,
        ContentType: 'image/jpeg',
      })
    );

    console.log(result);


    const conn = connect(config);
    const query = 'INSERT INTO ndb_metadata (`run`, `meta_key`, `meta_value`) VALUES (:run, :meta_key, :meta_value) ON DUPLICATE KEY UPDATE meta_value = :meta_value';
    const params = {
      run: obj.rut.split('-')[0].replaceAll('.', ''),
      meta_key: `jsonText_CedulaPosteriorMRZ`,
      meta_value: mrz
    }

    //const results1 = 
    await conn.execute(query, params);

    obj.estadoPosterior = 1;
    obj.mode = '';
    
    let encrypted = AES.encrypt(JSON.stringify(obj),configEnv.SECRET_KEY).toString();
    Astro.cookies.set('payload', encrypted, { path: '/' ,httpOnly: true, secure: true, sameSite: 'lax'});
  } catch (e) {
    console.log({e});
  }
}
---
<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="icon" href="/static/favicon.ico" />
    <title>CÃ©dula Posterior</title>
    <link href="/static/cropperjs/cropper.css" rel="stylesheet" />
    <script is:inline src="https://kit.fontawesome.com/79015a5470.js" crossorigin="anonymous"></script>
    <script is:inline src="/static/cropperjs/cropper.min.js"></script>
    <script is:inline src="/static/mrz-worker.bundle-min-wrapped.js"></script>
    <style>
      *,
      ::before,
      ::after {
        box-sizing: border-box;
      }

      body {
        background-color: #fff;
        color: #212529;
        font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        margin: 0;
      }

      .sr-only {
        border: 0;
        clip: rect(0, 0, 0, 0);
        height: 1px;
        overflow: hidden;
        padding: 0;
        position: absolute;
        white-space: nowrap;
        width: 1px;
      }
      
      .app {
        bottom: 0;
        left: 0;
        position: absolute;
        top: 0;
        right: 0;
      }

      .header {
        background-color: #1B4F72;
        height: 3rem;
        overflow: hidden;
        padding-left: 1rem;
        padding-right: 1rem;
        position: relative;
        z-index: 1;
      }

      @media (min-width: 768px) {
        .header {
          padding-left: 1.5rem;
          padding-right: 1.5rem;
        }
      }

      .title {
        color: #fff;
        display: block;
        float: left;
        font-size: 1.125rem;
        line-height: 3rem;
      }

      .main {
        background-color: #2471A3;
        bottom: 0;
        left: 0;
        position: absolute;
        right: 0;
        top: 3rem;
      }


      .navbar {
        float: right;
      }

      .nav__button {
        background-color: transparent;
        border-width: 0;
        color: #fff;
        cursor: pointer;
        display: block;
        float: left;
        height: 3rem;
        line-height: 3rem;
        text-align: center;
        width: 3rem;

        &:focus {
          outline: none;
        }

        &:hover {
          background-color: #0074d9;
          color: #fff;
        }
      }

      .nav__button_save {
        background-color: transparent;
        border-width: 0;
        color: #fff;
        cursor: pointer;
        display: block;
        float: left;
        height: 3rem;
        line-height: 3rem;
        text-align: center;
        width: 5rem;

        &:focus {
          outline: none;
        }

        &:hover {
          background-color: #0074d9;
          color: #fff;
        }
      }

      .nav--success:hover {
        background-color: #2ecc40;
      }

      .nav--danger:hover {
        background-color: #ff4136;
      }


      .editor {
        height: 100%;
      }

      .canvas {
        align-items: center;
        display: flex;
        height: 100%;
        justify-content: center;

        & > img {
          max-height: 100%;
          max-width: 100%;
        }
      }

      .toolbar {
        background-color: rgba(26, 82, 118, .5);
        bottom: 1rem;
        color: #fff;
        height: 4rem;
        left: 50%;
        margin-left: -12rem;
        position: absolute;
        width: 24rem;
        z-index: 2015;
      }

      .toolbar__button {
        background-color: transparent;
        border-width: 0;
        color: #fff;
        cursor: pointer;
        display: block;
        float: left;
        font-size: 1.875rem;
        height: 4rem;
        text-align: center;
        width: 4rem;

        &:focus {
          outline: none;
        }

        &:hover {
          background-color: #0074d9;
          color: #fff;
        }
      }

      .containerUploadBtn {
        position: fixed;
        left: 50%;
        bottom: 20px;
        transform: translate(-50%, -50%);
        margin: 0 auto;
        display: none;
      }

      .uploadBtn {
        display: inline-block;
        outline: 0;
        cursor: pointer;
        text-align: center;
        border: 0;
        padding: 7px 16px;
        min-height: 36px;
        min-width: 36px;
        color: #ffffff;
        background: #008060;
        border-radius: 4px;
        font-weight: 500;
        font-size: 14px;
        box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 0px 0px, rgba(0, 0, 0, 0.2) 0px -1px 0px 0px inset;
        :hover {
            background: #006e52;
        }

      }


      .loader {
        display: table;
        height: 100%;
        overflow: hidden;
        width: 100%;

        & > p {
          color: #999;
          display: table-cell;
          text-align: center;
          vertical-align: middle;
        }
      }

      .browse {
        color: #ffffff;
        cursor: pointer;
        margin-left: .25rem;
        font-size: 1.3rem;

        background-color: #154360;
        border: 1px solid rgba(27, 31, 35, .15);
        border-radius: 6px;
        box-shadow: rgba(27, 31, 35, .1) 0 1px 0;
        box-sizing: border-box;
        padding: 6px 16px;

        &:hover {
          color: #F7F9F9;
          /*text-decoration: underline;*/
          font-size: 1.5rem;
        }
      }

      /* The Modal (background) */
      .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
      }

      /* Modal Content/Box */
      .modal-content {
        background-color: #fefefe;
        margin: 15% auto; /* 15% from the top and centered */
        padding: 20px;
        border: 1px solid #888;
        width: 80%; /* Could be more or less, depending on screen size */
      }

      /* The Close Button */
      .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
      }

      .close:hover,
      .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
      }

      .d-none {
        display: none;
      }



      .overlay {
          left: 0;
          top: 0;
          width: 100%;
          height: 100%;
          position: fixed;
          background: #2471A3;
          z-index: 1;
      }

      .overlay__inner {
          left: 0;
          top: 0;
          width: 100%;
          height: 100%;
          position: absolute;
      }

      .overlay__content {
          left: 50%;
          position: absolute;
          top: 50%;
          transform: translate(-50%, -50%);
          text-align: center;
          color: #ffffff;
      }

      .spinner {
          width: 75px;
          height: 75px;
          display: inline-block;
          border-width: 2px;
          border-color: rgba(255, 255, 255, 0.05);
          border-top-color: #fff;
          animation: spin 1s infinite linear;
          border-radius: 100%;
          border-style: solid;
      }

      @keyframes spin {
        100% {
          transform: rotate(360deg);
        }
      }

    </style>
  </head>
  <body>
    
    <div id="loading" class="overlay">
      <div class="overlay__inner">
        <div class="overlay__content">
          <span class="spinner"></span>
          <div id="overlay_msg">Iniciando....</div>
        </div>
        
      </div>
    </div>
    
    <div class="app">
      <header class="header">
        <span class="title">Hola</span>
        <div class="navbar">
          <nav class="nav">
            
          </nav>
        </div>
      </header>
      <main class="main">
        <div id="editor" class="editor d-none">
          <div class="canvas">
            <img id="image" data-rut={obj.rut}><img>
          </div>
          <div id="toolbar" class="toolbar">
            <button
              class="toolbar__button"
              data-action="zoom-in"
              title="Zoom In (I)"
            >
              <span class="fa fa-search-plus" data-action="zoom-in"/>
            </button>
            <button
              class="toolbar__button"
              data-action="zoom-out"
              title="Zoom Out (O)"
            >
              <span class="fa fa-search-minus" data-action="zoom-out"/>
            </button>
            <button
              class="toolbar__button"
              data-action="rotate-left"
              title="Rotate Left (L)"
            >
              <span class="fa fa-rotate-left" data-action="rotate-left"/>
            </button>
            <button
              class="toolbar__button"
              data-action="rotate-left"
              title="Rotate Right (R)"
            >
              <span class="fa fa-rotate-right" data-action="rotate-left"/>
            </button>
            <button
              type="button"
              class="toolbar__button"
              data-action="remove"
              title="Delete (Delete)"
              style="color: #B3B6B7;"
            >
              <span class="fa fa-trash" data-action="remove"/>
            </button>

            <button
              type="button"
              class="toolbar__button"
              data-action="crop"
              title="OK (Enter)"
              style="color: #28B463;"
            >
              <span class="fa fa-check" data-action="crop"/>
            </button>
          </div>

          <div id="containerUploadBtn" class="containerUploadBtn">
            <button id="btnUpload" class="uploadBtn">Guardar Imagen</button>
          </div>
        </div>
        <div id="loader" class="loader">
          <p>
            <img src="/static/assets/img/ejemplo-reverso.jpg" /> <br /> <br />
            <label class="browse">Seleccione archivo de su CÃ©dula <b>Posterior</b> AQUÃ 
              <input
                id="file"
                class="sr-only"
                type="file"
                accept="image/*"
              >
            </label>
          </p>
        </div>
      </main>
    </div>

    <!-- The Modal -->
    <div id="myModal" class="modal">

      <!-- Modal content -->
      <div class="modal-content">

        <div style="margin: auto;">
          <progress id="progressBar" class="progressbar" value="0" max="100"></progress>
          <div>
            <div id="status"></div> 
            <div id="loaded_n_total"></div>
          </div>
        </div>

      </div>

    </div>
    <script is:inline type="text/javascript">
      function disableBack() { window.history.forward(); }
      setTimeout("disableBack()", 0);
      window.onload = disableBack;
      window.onpageshow = function(evt) { if (evt.persisted) disableBack() }
      window.onload = function() {void(0)}
    </script>
    <script>
      import Swal from 'sweetalert2';
      import imageCompression from 'browser-image-compression';

      const loadImage = (imageSrc: any) => new Promise(resolve => {
        const image1 = new Image();
        image1.onload = () => {
          const height = image1.height;
          const width = image1.width;
          resolve({ image1, width, height });
        };
        image1.src = imageSrc;
      });

      const loading = document.getElementById('loading') as HTMLElement;
      const overlay_msg = document.getElementById('overlay_msg') as HTMLElement;

      loading.style.display = 'block';

      const URL = window.URL || window.webkitURL;
      const input = document.getElementById('file') as HTMLInputElement;
      const image = document.getElementById('image') as HTMLImageElement;

      let cropper: any;


      function processAction(action: any) {
        console.log(action);
        switch (action) {
          case 'zoom-in':
            cropper.zoom(0.1);
            break;

          case 'zoom-out':
            cropper.zoom(-0.1);
            break;

          case 'rotate-left':
            cropper.rotate(-90);
            break;

          case 'rotate-right':
            cropper.rotate(90);
            break;

          case 'remove':
            input.value = '';
            cropper.destroy();
            cropper = null;
            (document.getElementById('loader') as HTMLElement).style.display= 'table';
            (document.getElementById('editor') as HTMLElement).style.display= 'none';

            break;

          case 'crop':

            loading.style.display = 'block';

            const canvas = cropper.getCroppedCanvas(); //{ width: 200, height: 250, fillColor: '#ffffff'});
            console.log({canvas});
            if ( canvas !== null ) {
              //const ctx = canvas.getContext('2d') as any;
              const url = canvas.toDataURL();

              image.src = url;

              cropper.destroy();
              cropper = null;

              

              (document.getElementById('toolbar') as HTMLElement).style.display= 'none';
              (document.getElementById('containerUploadBtn') as HTMLElement).style.display= 'block';

              
              loading.style.display = 'none';
            } else {
              Swal.fire({
                title: 'Error!',
                html: 'Ha ocurrido un error vuelva a intentarlo.',
                icon: 'error',
                confirmButtonText: 'Ok'
              }).then(() => {
                location.reload();
              });
            }         

            
            break;
          default:
        }
      }


      let buttons = document.querySelectorAll('.toolbar__button');

      for (let i = 0; i < buttons.length; i++) {
        buttons[i].addEventListener("click", function(event) {

          const element = event.target as HTMLElement;
          const action = element.dataset.action;
          processAction(action);
        });
      }



      input.addEventListener('change', async function (e: any) {

        loading.style.display = 'block';

        const files = e.target.files;
        console.log(files);

        if (files && files.length > 0) {
          const file = files[0];

          
          try {
            //

            overlay_msg.textContent = 'Validando dimensiones.... un momento por favor';

            const url1 = URL.createObjectURL(file);
            console.log(url1);
            const { width, height } = await loadImage(url1) as any;
            console.log( width, height );

            if ( width >= 640 && height >= 480) {

              overlay_msg.textContent = 'Analizando imagen....';

              console.log(image);

              (document.getElementById('loader') as HTMLElement).style.display= 'none';
              (document.getElementById('editor') as HTMLElement).style.display= 'block';

              image.onload = () => {
                image.onload = null;

                cropper = new window.Cropper(image, {
                  background: true,
                  dragMode: 'move',
                  aspectRatio: 16 / 10,
                  autoCropArea: 0.8,
                  restore: false,
                  guides: false,
                  center: false,
                  highlight: false,
                  cropBoxMovable: false,
                  cropBoxResizable: false,
                  toggleDragModeOnDblclick: false,

                  //autoCrop: true,
                  //minCropBoxWidth: 200,
                  //minCropBoxHeight: 250,
                  viewMode: 1,

                  ready: function () {
                    
                    loading.style.display = 'none';
                  }
                });

                
              };
              image.src = url1;
              
            } else {
              throw 'Resolucion no permitida. Minimo 640x480';
            }            

          } catch (error: any) {
            console.error('Error uploading file:', error);

            console.log(error);
            loading.style.display = 'none';

            input.value = '';

            Swal.fire({
              title: 'Error!',
              html: error,
              icon: 'error',
              confirmButtonText: 'Ok'
            });

            console.error('Error = ', error);

          }
        }
      });


      //import imageCompression from 'browser-image-compression';
      //import { IMAGE_TYPES } from 'jslib-html5-camera-photo';
      //let __imagen: any = null;
      let __mrz: any = null;

      function initWorker(){

        const regex = /^function .+\{?|\}$/g;
        //const ss = window.mrz_worker.toString();

        var blob = new Blob(
        [window.mrz_worker.toString().replace(regex, '')],
          { type:'text/javascript' }
        );
        
        console.log(blob);
        const objectURL  = URL.createObjectURL(blob);
        console.log(objectURL);
        const worker = new Worker(objectURL);

        worker.addEventListener('message',async function(e){
          var data = e.data;
          if(data.type == 'result'){
            console.log(data);
            __mrz = data.result;
            await upload();
          }
          else if (data.type == 'progress'){
            console.log('progress');
          }
          else if (data.type == 'error'){
            //console.log(data.error);
          }
        });

        return worker;
      }



      function progressHandler(event: any) {
        const percent = (event.loaded / event.total) * 100;

        /*(document.getElementById("loaded_n_total") as HTMLElement).innerHTML = "Subido " + event.loaded + " bytes de " + event.total;
        (document.getElementById("progressBar") as HTMLProgressElement).value = Math.round(percent);
        (document.getElementById("status") as HTMLElement).innerHTML = Math.round(percent) + "% subido...";*/

        overlay_msg.textContent = Math.round(percent) + "% subido...";

        if ( percent === 100 ) {
          overlay_msg.textContent = "Un momento por favor...";
        }

      }

      function completeHandler(){ 
        overlay_msg.textContent = "Redirigiendo...";
        location.href = '/formulario';
      }


      async function upload() {
        
        try {

          overlay_msg.textContent = 'Comprimiendo cÃ©dula frontal....';
          loading.style.display = 'block';
          //loading.style.display = 'none';
          //(document.getElementById("myModal") as HTMLElement).style.display = 'block';

          const imageFile = await fetch(image.src).then(r => r.blob());
          console.log(imageFile);
          
          const options = {
            maxSizeMB: 1,
            maxWidthOrHeight: 1024,
            useWebWorker: true,
            libURL: '/static/js/browser-image-compression.js'
          }
          const compressedFile = await imageCompression(imageFile as any, options);
          console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true
          console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`); // smaller than maxSizeMB
          console.log(compressedFile);

          const formData = new FormData();
          formData.append("file", compressedFile);
          formData.append('mrz', __mrz === null ? JSON.stringify({}) : JSON.stringify(__mrz));
          const ajax = new XMLHttpRequest();
          ajax.upload.addEventListener("progress", progressHandler, false);
          ajax.addEventListener("load", completeHandler, false);
          ajax.open("POST", "/cedula-posterior"); 
          ajax.send(formData);
          
        } catch (error: any) {
          console.log(error);

          loading.style.display = 'none';

          Swal.fire({
            title: 'Error!',
            html: error,
            icon: 'error',
            confirmButtonText: 'Ok'
          }).then(() => {
            location.reload();
          });

        }
      }


      (document.getElementById('btnUpload') as HTMLButtonElement).addEventListener("click", async function() {
        
        overlay_msg.textContent = 'Procesando cÃ©dula posterior....';
        loading.style.display = 'block';

        /*const options = {
          maxSizeMB: 1,
          maxWidthOrHeight: 1024,
          useWebWorker: true,
          libURL: '/static/assets/js/browser-image-compression.js'
        }*/
        
        try {

          //const imageFile = await fetch(image.src).then(r => r.blob());
          //console.log(imageFile);

          let worker = initWorker();

          //console.log({worker});

          worker.postMessage({
            cmd: 'process',
            image: image.src
          });


        } catch (error: any) {
          console.log(error);

          loading.style.display = 'none';

          Swal.fire({
            title: 'Error!',
            html: error,
            icon: 'error',
            confirmButtonText: 'Ok'
          }).then(() => {
            location.reload();
          });
        }
      });



      overlay_msg.textContent = 'Iniciando.... un momento por favor';
      loading.style.display = 'none';

    </script>
  </body>
</html>