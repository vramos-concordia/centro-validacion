---
import Layout from "../../layouts/Layout.astro";
import { AES, enc } from 'crypto-ts';
import { configEnv } from '../../lib/vars';
import { connect } from '@planetscale/database';
import { S3Client, GetObjectCommand, PutObjectCommand } from '@aws-sdk/client-s3';
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";
import * as pdfjsLib from 'pdfjs-dist/build/pdf.min.js';
import pdfjsWorker from 'pdfjs-dist/build/pdf.worker.min.js';
import { diferenciaMeses } from "../../lib/utils";
import { getCodLicenciaMedia, getDataCertNacimientoAsignacionFamiliar, validateFolioCodigoVerificacion } from "../../lib/document";
import Nivelescolaridad from "../../components/Nivelescolaridad.astro";

pdfjsLib.default.GlobalWorkerOptions.workerSrc = pdfjsWorker;

const config = {
  host: configEnv.DATABASE_HOST,
  username: configEnv.DATABASE_USERNAME,
  password: configEnv.DATABASE_PASSWORD,
  fetch: (url: any, init: any) => {
    delete init['cache']
    return fetch(url, init)
  }
}

const S3 = new S3Client({
  region: 'auto',
  endpoint: configEnv.R2_ENDPOINT,
  credentials: {
    accessKeyId: configEnv.R2_ACCESS_KEY_ID,
    secretAccessKey: configEnv.R2_SECRET_ACCESS_KEY,
  },
});

let statusDocuments : {[key: string]: any} = {};
let documentsSolicitados : {[key: string]: any} = {};

let cargados : any = [];
let errores : string[] = [];

let obj : {[key: string]: any} = {};
let row : {[key: string]: any} = {};
let nombres = '';

let RunsCN : any = [];

let showBtnFinalizar = true;

if ( Astro.cookies.has('token') ) {

  //recuperar valores de la cookie
  let token = Astro.cookies.get('token')?.value as string;
  let decodeBase64Token = atob(token);
  let decrypted = AES.decrypt(decodeBase64Token, configEnv.SECRET_KEY);
  obj = JSON.parse(decrypted.toString(enc.Utf8).toString());

  obj.nivel_escolaridad = null;
  //console.log('cookie-documentacion', {obj});

  const conn = connect(config);
  
  const query = `select * from ndb_postulant where run = :run`;
  const params = {
    run: obj.rut.split('-')[0].replaceAll('.', ''),
  }
  const result = await conn.execute(query, params);
  if ( result.rows.length > 0 ) {
    row = result.rows[0];
    //console.log(row);

    if ( row.post_finished === 1 ) {
      return Astro.redirect('/finalizar');
    }

    if ( row.docs_finished === 1 ) {
      return Astro.redirect("/f/experiencia");
    }


    documentsSolicitados.licencia_media = false;

    if ( row.have_children_under_5_years === 1 ) {
      Array(parseInt(row.num__children_under_5_years)).fill(0).map((_val, index) => {
        documentsSolicitados[`certificado_nacimiento_menor_5_11_h_${index + 1}`] = false;
      });
    }

    if ( row.have_children_under_18_years_isabilities === 1 ) {
      Array(parseInt(row.num_children_under_18_years_isabilities)).fill(0).map((_val, index) => {
        documentsSolicitados[`certificado_nacimiento_entre_6_18_h_${index + 1}`] = false;
        documentsSolicitados[`certificado_discapacidad_entre_6_18_h_${index + 1}`] = false;
      });
    }
  
    //console.log(row);

    //console.log({documentsSolicitados});
    //console.log('query=', Object.keys(documentsSolicitados).join("','"));

    //let names = row.names.toLowerCase().replace(/(^\w{1})|(\s+\w{1})/g, (c: any) => c.toUpperCase());
    //let lastn = row.lastn.toLowerCase().replace(/(^\w{1})|(\s+\w{1})/g, (c: any) => c.toUpperCase());
    //let lastnm = row.lastnm.toLowerCase().replace(/(^\w{1})|(\s+\w{1})/g, (c: any) => c.toUpperCase());

    nombres = `${row.names} ${row.lastn} ${row.lastnm}`;

    //revisar documentos cargados.....

    const query0 = `select * from ndb_documents where dni = :dni`;
    const params0 = {
      dni: obj.rut.split('-')[0].replaceAll('.', ''),
    }
    const result0 = await conn.execute(query0, params0);
    if ( result0.rows.length > 0 ) {
      for ( let i = 0; i < result0.rows.length; i++ ) {
        //console.log({RunsCN});

        let row0: any = result0.rows[i];
        const content = JSON.parse(row0.document_content);
        //console.log(row0);
        //console.log(content);
        //

        

        if ( documentsSolicitados.hasOwnProperty(row0.document_key) === false ) {
          const queryDelete = `delete from ndb_documents where id = :id`;
          const paramsDelete = {
            id: row0.id
          }
          await conn.execute(queryDelete, paramsDelete);

          continue;
        }
        
        if ( row0.document_content === null ) {
          //console.log(row0.document_key);
          continue;
        };

        cargados.push(row0.document_key);

        let statusDocumento = 1;

        const url = await getSignedUrl(S3, new GetObjectCommand({
          Bucket: configEnv.R2_BUCKET, 
          Key: `${row0.path}`
        }), { expiresIn: 3600 });
        

        statusDocuments[row0.document_key] = {
          valido: false,
          corresponde: false,
          yafuecargado: false,
          edadOk: true,
          texto: '',
          url: url,
          //jsonCert: null
        }

        //Validar certificado enseñanaza media.
        if ( row0.document_key.includes('licencia_media')) {
          //console.log(row0.response_validador);
          let idx = content.findIndex((item: any) => item === 'LICENCIA DE EDUCACIÓN MEDIA');
          
          if ( idx !== -1 ){
            let mm = '<div class="text-center"><b>';
            let x = idx;
            for (; x < content.length; x++ ) {
              if (content[x].includes('Certifico') ) break;
              if ( content[x].trim().length > 0 ) {
                mm += `${content[x].trim()} <br />`;
              }
            }

            mm += '</b></div><br />'

            const cc = content.slice(x, content.length);
            for (let x = 0; x < cc.length; x++ ) {
              if ( cc[x].trim().length > 0 ) {
                //console.log(`*${cc[x]}*`);
                let separator = cc[x].includes(',') ? '' : ' ';
                mm += `${separator}${cc[x].trim()}`;
              }
            }

            statusDocuments.licencia_media.texto = mm;
            statusDocuments.licencia_media.valido = true;

            if(content.includes(obj.rut.replaceAll('.', ''))) {
              statusDocuments.licencia_media.corresponde = true;
              statusDocumento = 2;
            }
          } else {
            statusDocuments.licencia_media.valido = false;
            statusDocumento = 3;
          }
        }

        if ( row0.document_key.includes('certificado_nacimiento_') ) {

          //console.log(row0.data_document);
          if ( row0.data_document !== null ) {
            let jsonValidador = JSON.parse(row0.response_validador);
            let jsonCert = JSON.parse(row0.data_document);
            //console.log(jsonCert);

            if ( jsonCert.hasOwnProperty('error') === false ) {

              //crear tabla....
              let tbl = `
                <div class="text-center"><b>CERTIFICADO DE NACIMIENTO</b></div>
                <div class="text-center mb-3">Uso exclusivo para ASIGNACION FAMILIAR</div>
                <table class="table table-hover">
                  <tbody>
                    <tr>
                      <td>FOLIO</td>
                      <td>${jsonValidador.ver_nameInputTextFolio}</td>
                    </tr>
                    <tr>
                      <td>Código Verificación</td>
                      <td>${jsonValidador.ver_nameInputTextCodVerificador}</td>
                    </tr>
              `
              for (const property in jsonCert) {
                let className = '';
                if ( ['Fecha nacimiento', 'Nombre de la Madre', 'R.U.N. de la Madre', 'Nombre inscrito', 'R.U.N.'].includes(property) ) {
                  className = 'table-info';
                }

                tbl += `<tr class="${className}">
                          <td>${property}</td>
                          <td>${jsonCert[property]}</td>
                        </tr>`
              }

              tbl += `
                  </tbody>
                </table>
              `;

              statusDocuments[row0.document_key].texto = tbl;
              statusDocuments[row0.document_key].valido = true;

              if( jsonCert['R.U.N. de la Madre'] === obj.rut ) 
              {
                statusDocuments[row0.document_key].corresponde = true;
                statusDocumento = 2;
              }

              const meses: any = {
                "ENERO": "01",
                "FEBRERO": "02",
                "MARZO": "03",
                "ABRIL": "04",
                "MAYO": "05",
                "JUNIO": "06",
                "JULIO": "07",
                "AGOSTO": "08",
                "SEPTIEMBRE": "09",
                "OCTUBRE": "10",
                "NOVIEMBRE": "11",
                "DICIEMBRE": "12"
              };

              console.log(jsonCert)

              if ( jsonCert.hasOwnProperty('Fecha nacimiento') ){
                let fechaNacimiento = jsonCert['Fecha nacimiento'];
                let partsFechaNacimiento = fechaNacimiento.split(' ');
                let fechaNacimientoNormalizada = `${partsFechaNacimiento[2]}-${meses[partsFechaNacimiento[1].toUpperCase()]}-${partsFechaNacimiento[0]}`;

                //console.log(fechaNacimientoNormalizada);

                let now = new Intl.DateTimeFormat('es-CL', {
                      year: "numeric",
                      month: "numeric",
                      day: "numeric",
                      timeZone: 'America/Santiago',
                    }).format(new Date());
                
                let partsNow = now.split('-');
                let fechaNowNormalizada = `${partsNow[2]}-${partsNow[1]}-${partsNow[0]}`;

                //console.log(fechaNowNormalizada);


                const fecha1 = new Date(fechaNacimientoNormalizada);
                const fecha2 = new Date(fechaNowNormalizada);
                const mesesEdad = diferenciaMeses(fecha1, fecha2);
                console.log(row0.document_key, mesesEdad, 'meses'); // Resultado: 30

                // 
                if (row0.document_key.includes('certificado_nacimiento_entre_6_18_h')) {
                  //console.log('entre 6 y 18');
                  if ( mesesEdad < (6*12) || mesesEdad > (18*12)) {
                    console.log('no corresponde. es mas chico o mas grande.')
                    statusDocuments[row0.document_key].edadOk = false;
                    statusDocumento = 2;
                  }
                }

                if (row0.document_key.includes('certificado_nacimiento_menor_5_11_h')) {
                  //console.log('menor a 5 y 11 meses');
                  if ( mesesEdad > ((5*12) + 11)) {
                    console.log('no corresponde. es mayor.');
                    statusDocuments[row0.document_key].edadOk = false;
                    statusDocumento = 2;
                  }
                }
              } else {
                statusDocuments[row0.document_key].valido = false;
              }

              


              //validar si ya esta cargado .....
              if ( RunsCN.includes(jsonCert['R.U.N.']) ) {
                statusDocuments[row0.document_key].yafuecargado = true;
                statusDocumento = 1;
              } else {
                RunsCN.push(jsonCert['R.U.N.']);
              }
            }
          }
        }

        if ( row0.document_key.includes('certificado_discapacidad') ) {
          let idx0 = content.findIndex((item: any) => item === 'CERTIFICADO DE DISCAPACIDAD');

          if ( idx0 !== -1 ) {
            //obj.rut = '19.680.252-5';
            let idx1 = content.findIndex((item: any) => item === obj.rut);
            //console.log({idx0, idx1});

            if ( idx1 !== -1 ) {
              statusDocuments[row0.document_key].texto = 'CERTIFICADO DE DISCAPACIDAD - Validado';
              statusDocuments[row0.document_key].valido = true;
              statusDocuments[row0.document_key].corresponde = true;
              statusDocumento = 2;
            } else {
              statusDocuments[row0.document_key].valido = true;
              statusDocuments[row0.document_key].corresponde = false;

              statusDocumento = 3;
            }
          } else {
            statusDocumento = 3;
          }
        }

        documentsSolicitados[row0.document_key] = (statusDocumento === 2 || statusDocumento === 3) ? true : false;

        //console.log(statusDocuments[row0.document_key]);

        //actualizar estado.
        //actualizar estado en BD a 2.
        const query1 = `update ndb_documents set status = :status where id = :id`;
        const params1 = {
          id: row0.id,
          status: statusDocumento
        }

        await conn.execute(query1, params1);
      }
    }

    //statusDocuments = {};
    //console.log(statusDocuments)
    console.log({documentsSolicitados, cargados});

    for ( const keyDoc in documentsSolicitados) {
      if ( documentsSolicitados[keyDoc] === false ) {
        showBtnFinalizar = false;
      }

      if ( cargados.includes(keyDoc) === false ) {
        //crear key sin cargar.....

        let type = 0;

        if ( keyDoc.includes('licencia_media') ) type = 1;
        if ( keyDoc.includes('certificado_nacimiento_menor_5_11_h_') ) type = 2; // certificado de nacimiento hijo/a menor a 5 y 11 meses.
        if ( keyDoc.includes('certificado_nacimiento_entre_6_18_h_') ) type = 3; // certificado de nacimiento hijo/a entre 6 y 18 años.
        if ( keyDoc.includes('certificado_discapacidad_entre_6_18_h_') ) type = 4; // certificado discapacidad hijo/a entre 6 y 18 años.

        const query = `insert into ndb_documents(dni, type, document_key, status)
                        values (:dni, :type, :document_key, :status)
                        ON DUPLICATE KEY UPDATE type = :type`

        const params = {
          dni: obj.rut.split('-')[0].replaceAll('.', ''),
          type: type,
          document_key: keyDoc,
          status: 0
        }

        await conn.execute(query, params);
      }
    }


    if (Astro.request.method === "POST") {
  
      const data = await Astro.request.formData();
      console.log(data);

      if(!data.get("titulo")) {
        errores.push("Debes indicar titulo o carrera obtenida.")
      }
      if(!data.get("institucion")) {
        errores.push("Debes indicar tu institucion.")
      }
      if(!data.get("obtencion_titulo")) {
        errores.push("Falta año de obtencion del titulo o carrera.")
      }
      if(!data.get("licencia_media")) {
        errores.push("Falta subir archivo PDF del certificado de estudios.")
      }
      if(data.get("curso_excel") == "1" && !data.get("certificado_excelpdf")) {
        errores.push("Falta subir archivo PDF del curso excel.")
      }
      if(!data.get("nivel_escolaridad")) {
        errores.push("Debes añadir tu ultimo nivel de estudio.")
      }
      if(!data.get("certificado")) {
        errores.push("Falta especificar tipo de certificado.")
      }
      if(!data.get("curso_excel")) {
        errores.push("Debes especificar curso Excel.")
      }

      if(errores.length === 0) {
        if(data.get("licencia_media")) {
          const file = data.get("licencia_media") as File;
          const tipo = file.name;
          const extension = file.name.split('.').pop();
          const buffer = (await file.arrayBuffer()) as any;

          const keyRut = obj.rut.split('-')[0].replaceAll('.', '');

          const result = await S3.send(new PutObjectCommand({
              Body: buffer,
              Bucket: configEnv.R2_BUCKET,
              Key: `${keyRut}/${tipo}.${extension}`,
              //ContentType: 'image/jpeg',
          }));

          let content : any = [];
          var typedarray = new Uint8Array(buffer.slice(0));
          const loadingTask = pdfjsLib.getDocument(typedarray);
          const pdf = await loadingTask.promise;
          for ( let nn = 1; nn <= pdf.numPages; nn++) {
            const page = await pdf.getPage(nn);
            const textContent = await page.getTextContent();
            for(let j = 0; j < textContent.items.length; j++) {
              content.push(textContent.items[j].str);
            }
          }

          const query = `insert into ndb_documents(dni, type, path, document_key, document_content, response_validador, data_document, status)
                    values (:dni, :type, :path, :document_key, :document_content, :response_validador, :data_document, :status)
                    ON DUPLICATE KEY UPDATE 
                      document_content = :document_content, 
                      response_validador = :response_validador, 
                      data_document = :data_document,
                      path = :path,
                      type = :type`

          const params = {
            dni: obj.rut.split('-')[0].replaceAll('.', ''),
            type: 1,
            path: `${keyRut}/${tipo}.${extension}`,
            document_key: tipo,
            document_content: JSON.stringify(content),
            response_validador: null,
            data_document: null,
            status: 1
          }

          await conn.execute(query, params);

          console.log(result)
        }

        if(data.get("certificado_excelpdf")) {
          const file = data.get("certificado_excelpdf") as File;
          const tipo = file.name;
          const extension = file.name.split('.').pop();
          const buffer = (await file.arrayBuffer()) as any;

          const keyRut = obj.rut.split('-')[0].replaceAll('.', '');

          const result = await S3.send(new PutObjectCommand({
              Body: buffer,
              Bucket: configEnv.R2_BUCKET,
              Key: `${keyRut}/${tipo}.${extension}`,
              //ContentType: 'image/jpeg',
          }));

          let content : any = [];
          var typedarray = new Uint8Array(buffer.slice(0));
          const loadingTask = pdfjsLib.getDocument(typedarray);
          const pdf = await loadingTask.promise;
          for ( let nn = 1; nn <= pdf.numPages; nn++) {
            const page = await pdf.getPage(nn);
            const textContent = await page.getTextContent();
            for(let j = 0; j < textContent.items.length; j++) {
              content.push(textContent.items[j].str);
            }
          }

          const query = `insert into ndb_documents(dni, type, path, document_key, document_content, response_validador, data_document, status)
                    values (:dni, :type, :path, :document_key, :document_content, :response_validador, :data_document, :status)
                    ON DUPLICATE KEY UPDATE 
                      document_content = :document_content, 
                      response_validador = :response_validador, 
                      data_document = :data_document,
                      path = :path,
                      type = :type`

          const params = {
            dni: obj.rut.split('-')[0].replaceAll('.', ''),
            type: 2,
            path: `${keyRut}/${tipo}.${extension}`,
            document_key: tipo,
            document_content: JSON.stringify(content),
            response_validador: null,
            data_document: null,
            status: 1
          }

          await conn.execute(query, params);

          console.log(result)
        }

        const queryU = `update ndb_postulant set docs_finished = 1, university_degree = :university_degree, institution = :institution, year_graduation = :year_graduation where run = :run`;
        const paramsU = {
          run: row.run,
          university_degree: data.get('titulo'),
          institution : data.get('institucion'),
          year_graduation : data.get('obtencion_titulo')
        }
        await conn.execute(queryU, paramsU);

        return Astro.redirect("/f/experiencia");
      };
    }
  } else {
    Astro.cookies.delete('token');
    return Astro.redirect('/');
  }
} else {
  return Astro.redirect('/');
}

---
<Layout title="Documentación">
  <form method="POST" id="frm">
    {errores.length > 0 && 
      
      <div class="alert alert-danger" role="alert">
        <strong>Corrija los siguientes errores: </strong>
        <ul class="m-1">
          {errores.map((item: any) => (
            <li><Fragment set:html={item} /></li>
          ))}
        </ul>
      </div>
    }

    <div class="box">

    <div class="notification is-warning has-text-justified">
      <p>        
        Hola {nombres},
      </p>
      <p class="alert alert-warning" style="text-align: justify;">
        Le solicitamos que suba los documentos necesarios para completar el proceso. 
        Si no los tiene a la mano, puede cargarlos en cualquier momento ingresando desde el enlace disponible en su correo electrónico.
      </p>

      <p class="alert alert-warning" style="text-align: justify;">
        Si tienes alguna pregunta o inquietud acerca del proceso de postulación, no dudes en contactarnos a través de nuestro call center +56 22 582 8796.
      </p>

      { (row.have_children_under_5_years === 1 || row.have_children_under_18_years_isabilities === 1) &&
      <p class="alert alert-info" style="text-align: justify;">
        Nota: Debe subir un <b>CERTIFICADO DE NACIMIENTO para ASIGNACION FAMILIAR</b>
      </p>
      }
    </div>

   
  </div>
  
  <Nivelescolaridad obj={obj}></Nivelescolaridad>

  <div class="box">
    <div class="field">
      <div class="">
        <h6 class="mb-3"><b>Certificado de estudios</b></h6>
        <div class="control">
          <div>
            <select id="certificado" name="certificado" class="form-select" required>
              <option value="">Seleccione una opción</option> 
              {obj.nivel_escolaridad === '1' ? <option value="1" selected >Certificado enseñanza media</option> : <option value="1">Certificado enseñanza media</option> }
              {obj.nivel_escolaridad === '2' ? <option value="2" selected >Certificado de estudios</option> : <option value="2">Certificado de estudios</option> }
              {obj.nivel_escolaridad === '3' ? <option value="3" selected >Titulo tecnico o profecional</option> : <option value="3">Titulo tecnico o profecional</option> }
            </select>
          </div>
        </div>
        <p style="text-align: justify;">
          Para continuar con el proceso de postulación, debe cargar la siguiente documentación obligatoria (descárgalo aquí: <a href="https://certificados.mineduc.cl/" target="_blank">https://certificados.mineduc.cl/</a>). 
          En caso de subir otro documento que certifique su nivel de enseñanza media completa debe esperar a la aprobación de estos para continuar con su postulación.
        </p>
        <div class="box text-center">
        { !statusDocuments.hasOwnProperty('licencia_media') && 
          <input class="form-control file-input" type="file" id="licencia_media" name="licencia_media" accept="application/pdf" hidden/>
          <label class="btn btn-warning" for="licencia_media"><b>Seleccione archivo</b> del certificado seleccionado</label>
          <div class="invalid-feedback">Debe adjuntar un documento PDF</div>
        }
        
        { (statusDocuments.hasOwnProperty('licencia_media') && statusDocuments.licencia_media.valido === false ) && 
          
          <p class="alert alert-info">Certificado de estudios de enseñanza media completa - cargado 
            <a class="pdf" href={statusDocuments.licencia_media.url}><img src="/static/assets/img/pdf.png" /></a>
          </p>
          <div class="alert alert-success" style="text-align: justify;">
            Le informamos que hemos recibido el documento que ha cargado. 
            Sin embargo, no hemos podido confirmar que se trate de un Certificado de Estudios de Enseñanza Media Completa emitido por el MINEDUC. <br /><br />
            Si el documento cargado es otro tipo de certificación que acredite su nivel de enseñanza media completa, 
            <b>le solicitamos esperar la aprobación correspondiente para continuar con su postulación.</b>
          </div>
          <div class="alert alert-warning" style="text-align: justify;">
            Si ha cometido algún error en el documento que ha enviado, no se preocupe. Puede volver a cargar el archivo correcto en cualquier momento.
          </div>
          <input class="form-control file-input" type="file" id="licencia_media" name="licencia_media" accept="application/pdf" hidden/>
          <label class="btn btn-warning" for="licencia_media"><b>Seleccione archivo</b> de su Certificado de Estudios de Enseñanza Media Completa</label>
          <div class="invalid-feedback">Debe adjuntar un documento PDF</div>
        }

        { (statusDocuments.hasOwnProperty('licencia_media') && statusDocuments.licencia_media.valido && statusDocuments.licencia_media.corresponde) && 
          <p class="alert alert-info">Certificado de estudios de enseñanza media completa - cargado <a class="pdf" href={statusDocuments.licencia_media.url}><img src="/static/assets/img/pdf.png" /></a></p>
          <div class="alert alert-success " style="text-align: justify;"><Fragment set:html={statusDocuments.licencia_media.texto} /></div>
        }

        { (statusDocuments.hasOwnProperty('licencia_media') && statusDocuments.licencia_media.valido && !statusDocuments.licencia_media.corresponde) && 
          <p class="alert alert-info">Certificado de estudios de enseñanza media completa - cargado <a class="pdf" href={statusDocuments.licencia_media.url}><img src="/static/assets/img/pdf.png" /></a></p>
          <div class="alert alert-danger " style="text-align: justify;"><Fragment set:html={statusDocuments.licencia_media.texto} /></div>
          <div class="alert alert-warning " style="text-align: justify;">
            Se le informa que el documento enviado no corresponde a <b>{nombres}, RUN {obj.rut.replaceAll('.', '')}</b>. 
            Le solicitamos que, por favor, suba su certificado de estudios de enseñanza media completa el cual puede descargar desde el siguiente enlace:
            <a href="https://certificados.mineduc.cl/" target="_blank">https://certificados.mineduc.cl/</a>
          </div>
          <input class="form-control file-input" type="file" id="licencia_media" name="licencia_media" accept="application/pdf" hidden/>
          <label class="btn btn-warning" for="licencia_media"><b>Seleccione archivo</b> de su Certificado de Estudios de Enseñanza Media Completa</label>
          <div class="invalid-feedback">Debe adjuntar un documento PDF</div>
        }
        </div>
      </div>
    </div> 
  </div>
  
  <div class="box">
    <div class="field">
      <label class="label" for="curso_excel">¿Haz realizado un curso de Excel?</label>
      <div class="control">
        <select id="curso_excel" name="curso_excel" class="form-select" required>
          <option value="">Seleccione una opción</option>
          <option value="1">SI</option>
          <option value="2">NO</option>
        </select>
      </div>
    </div>

    <!-- Contenido que se mostrará dinámicamente -->
    <div id="dynamic-content"></div>
  </div>

  <div class="box">

    <div class="notification is-warning has-text-justified">
      <p class="alert alert-warning" style="text-align: justify;">
        Si no tienes todos los documentos, los podrás cargar después (antes que termine el plazo de postulación). 
        Para que la postulación sea válida, debes cargar todos los documentos y presionar el botón finalizar.
      </p>
    </div>

    <div class="control row">
      <div class="col-6" style="text-align: right">
        <button id="btnFinalizar" class="btn btn-primary">&raquo; Finalizar</button>
      </div>
    </div>

    <!--{ showBtnFinalizar && 
      <div class="control row">
        <div class="col-6">
          <p>
            <a href="/editar" class="btn btn-warning">&raquo; Editar</a>
          </p>
        </div>
        <div class="col-6" style="text-align: right">
          <a id="btnFinalizar" href="/finalizar" class="btn btn-primary">&raquo; Finalizar</a>
        </div>
      </div>
    }

    { !showBtnFinalizar && 
      <div class="control row">
        <div class="col-6">
          <p>
            <a href="/editar" class="btn btn-warning">&raquo; Editar</a>
          </p>
        </div>
        <div class="col-6" style="text-align: right">
          <button class="btn btn-primary" disabled>&raquo; Finalizar</button>
        </div>
      </div>
    }-->

  </div>
  </form>

  <div class="modal fade" id="modalupload" data-backdrop="static" tabindex="-1" aria-labelledby="modalupload" aria-hidden="true">
    <div class="modal-dialog  modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h4>Subiendo documento ....</h4>
        </div>
        <div class="modal-body">
          <div style="margin: auto;">

            <div class="progress">
              <div id="progressBar" class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
  
            <div>
              <div id="status"></div> 
              <div id="loaded_n_total"></div>
            </div>
          </div>
        </div>
        
      </div>
    </div>
  </div>
  
  <!-- Modal -->
  <div class="modal fade modal-xl" id="modalpreview" tabindex="-1" role="dialog" aria-labelledby="modalpreview" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="modalpreview">Previsualización</h5>
        </div>
        <div class="modal-body text-center">
          <img id="codeQR" src="" />
          <div id='pdf-viewer'></div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
          <button id="confirmUpload" type="button" class="btn btn-primary">Confirmar documento</button>
        </div>
      </div>
    </div>
  </div>


  <!-- Modal -->
  <div class="modal fade modal-xl" id="modalViewPdf" tabindex="-1" role="dialog" aria-labelledby="modalViewPdf" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Visualización</h5>
        </div>
        <div class="modal-body text-center">
          <div id='pdfPagesViewer'></div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    let btnFinalizar = document.getElementById("btnFinalizar");
    let formDocs = document.getElementById("frm") as HTMLElement;

    let formData = new FormData();

    formDocs.addEventListener("submit", (e) => {
      e.preventDefault();
      formDocs.querySelectorAll("input").forEach((input : any) => {
        if(input.type == "file") formData.append(input.name, input.files[0]);
        else formData.append(input.name, input.value);
      })

      formDocs.querySelectorAll("select").forEach((select) => {
        formData.append(select.name, select.value);
      })

      const ajax = new XMLHttpRequest();
      ajax.open("POST", "/f/documentacion"); 
      ajax.send(formData);
    })
  </script>
  <script is:inline src="/static/zxing_reader.js"></script>
  <script is:inline src="/static/assets/js/bootstrap.js"></script>
  <script>
    // Obtener el elemento select y el contenedor dinámico
    const selectCurso : any = document.getElementById("curso_excel");
    const dynamicContent : any = document.getElementById("dynamic-content");

    // Escuchar cambios en el select
    selectCurso.addEventListener("change", (event) => {
      const value = event.target.value;

      // Limpiar contenido dinámico
      dynamicContent.innerHTML = "";

      if (value === "1") {
        // Agregar contenido dinámico si el valor es "1"
        dynamicContent.innerHTML = `
          <div class="box">
            <div class="field">
              <h6 class="mb-3"><b>Cargar certificado</b></h6>
              <input class="form-control file-input" type="file" id="certificado_excelpdf" name="certificado_excelpdf" accept="application/pdf" hidden />
              <label class="btn btn-warning" for="certificado_excelpdf"><b>Seleccione archivo</b> del certificado seleccionado</label>
              <div class="invalid-feedback">Debe adjuntar un documento PDF</div>
            </div>
          </div>
        `;
      }
    });
  </script>
  <!--<script>

    import * as pdfjsLib from 'pdfjs-dist/build/pdf.min.js';
    import pdfjsWorker from 'pdfjs-dist/build/pdf.worker.min.js';

    pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;

    // Obtén el elemento select
    const selectElement : any = document.getElementById("certificado");

    // Maneja el evento change
    selectElement.addEventListener("change", (event) => {
      // Obtén el valor seleccionado
      const selectedValue = event.target.value;

      // Muestra el valor en la consola
      console.log("Valor seleccionado:", selectedValue);
      });


    /*let zxing = window.ZXing().then(function(instance: any) {
      zxing = instance; // this line is supposedly not required but with current emsdk it is :-/
    });*/


    const loadingDiv = document.getElementById('loading') as HTMLElement;
    function showSpinner() { loadingDiv.style.visibility = 'visible'; }
    function hideSpinner() { loadingDiv.style.visibility = 'hidden'; }

    function progressHandler(event: any) {
      (document.getElementById("loaded_n_total") as HTMLElement).innerHTML = "Subido " + event.loaded + " bytes de " + event.total;
      const percent = (event.loaded / event.total) * 100;
      (document.getElementById("status") as HTMLElement).innerHTML = Math.round(percent) + "% subido...";
      (document.getElementById("progressBar") as HTMLElement).setAttribute("style", `width: ${Math.floor(percent)}%`);

      if ( percent >= 100 ) {
        (document.getElementById("loaded_n_total") as HTMLElement).innerHTML = '';
        (document.getElementById("status") as HTMLElement).innerHTML = 'Un momento por favor....';
      }

    }

    function completeHandler(modal:any) {
      console.log("dasdas")

      modal.hide();
    }

    const readFileToArrayBuffer = async (fileData: any) => {
      return new Promise( (resolve, _reject) => {
        const reader = new FileReader();
        reader.readAsArrayBuffer(fileData);
        reader.onload = () => {
          const result = reader.result as any;
          const bytes = new Uint8Array(result);
          resolve(bytes);
        };
      });
    }

    let selectedInputFile: HTMLInputElement;

    const myModalEl = document.getElementById('modalpreview') as HTMLElement;
    myModalEl.addEventListener('hidden.bs.modal', () => {
      selectedInputFile.value = '';
      selectedInputFile.classList.remove('is-invalid');
    });


    (document.getElementById('confirmUpload') as HTMLButtonElement).addEventListener('click', function() {

      const modalElement0 = document.getElementById('modalpreview');
      const modalPreview = window.bootstrap.Modal.getInstance(modalElement0)
      modalPreview.hide();

      const modalElement = document.getElementById('modalupload');
      const modal = new window.bootstrap.Modal(modalElement, {
        keyboard: false,
        backdrop: 'static'
      });
      modal.show();

      const files = selectedInputFile.files as FileList;
      const selectedFile = files[0];
      const tipo = selectedInputFile.name;

      console.log( 'It is validated!' )
      //enviar el archivo.
      const formData = new FormData();
      formData.append("file", selectedFile);
      formData.append("tipo", tipo);

      const ajax = new XMLHttpRequest();
      ajax.upload.addEventListener("progress", progressHandler, false);
      ajax.addEventListener("load", function() {
        completeHandler(modal);
      }, false);
      ajax.open("POST", "/f/documentacion"); 
      ajax.send(formData);
    });

    let elements = document.querySelectorAll('.file-input');

    elements.forEach(function(item) {
      (item as HTMLInputElement).onchange = async function(event) {

        //document.getElementById("myModal").style.display = 'block';        
        selectedInputFile = event.target as HTMLInputElement;

        const files = selectedInputFile.files as FileList;
        if ( files.length > 0 ) {
          
          const selectedFile = files[0];
          const tipo = selectedInputFile.name;
          console.log({selectedFile, tipo});

          if ( selectedFile.type === 'application/pdf' ) {

            try {

              const pagePromises: any[] = [];
              
              const bytes = await readFileToArrayBuffer(selectedFile);
              const loadingTask = await window.pdfjsLib.getDocument(bytes);

              loadingTask.promise.then((pdf: any)=> {

                for (let i = 1; i <= pdf.numPages; i += 1) {
                  // Push the promises into promise array
                  pagePromises.push(pdf.getPage(i));
                }

                Promise.all(pagePromises).then(async (pages) => {
                  // render pdf pages
                  (document.getElementById('pdf-viewer') as HTMLElement).innerHTML = '';

                  let content : any = [];
                  for (let i = 0; i < pages.length; i += 1) {
                    const page = pages[i];
                    const scale = 1.5;
                    const viewport = page.getViewport({scale});
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    const renderContext = {
                      canvasContext: ctx,
                      viewport: viewport
                    };

                    const textContent = await page.getTextContent();
                    for(let j = 0; j < textContent.items.length; j++) {
                      content.push(textContent.items[j].str);
                    }

                    canvas.height = viewport.height;
                    canvas.width = viewport.width;

                    (document.getElementById('pdf-viewer') as HTMLElement).appendChild(canvas);
                    page.render(renderContext);
                  }

                  const modalElement = document.getElementById('modalpreview');
                  const modal = new window.bootstrap.Modal(modalElement, {
                    keyboard: false,
                    backdrop: 'static'
                  });
                  modal.show();

                });
                          

              }).catch((e: any) => {
                console.log(e);
                selectedInputFile.classList.add('is-invalid');
              });
              
            } catch(e) {
              console.log(e);
              selectedInputFile.classList.add('is-invalid');
            }
            
            
          } else {
            selectedInputFile.classList.add('is-invalid');
          }
        }
        
      }
    });


    let elementsPdf = document.querySelectorAll<HTMLAnchorElement>('.pdf');

    elementsPdf.forEach(function(item) {
      console.log(item);
        item.addEventListener('click', function (event: any) {
          event.preventDefault();

          showSpinner();
          
          const pagePromises: any[] = [];
          const loadingTask = pdfjsLib.getDocument(item.href);
          loadingTask.promise.then(function(pdf: any) {
            console.log('PDF loaded');

            for (let i = 1; i <= pdf.numPages; i += 1) {
              // Push the promises into promise array
              pagePromises.push(pdf.getPage(i));
            }

            Promise.all(pagePromises).then(async (pages) => {
              // render pdf pages
              (document.getElementById('pdfPagesViewer') as HTMLElement).innerHTML = '';

              for (let i = 0; i < pages.length; i += 1) {
                const page = pages[i];
                const scale = 1.5;
                const viewport = page.getViewport({scale});
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                const renderContext = {
                  canvasContext: ctx,
                  viewport: viewport
                };
                canvas.height = viewport.height;
                canvas.width = viewport.width;
                (document.getElementById('pdfPagesViewer') as HTMLElement).appendChild(canvas);
                page.render(renderContext);
              }

              hideSpinner();
              const modalElement = document.getElementById('modalViewPdf');
              const modal = new window.bootstrap.Modal(modalElement, {
                keyboard: false,
                backdrop: 'static'
              });
              modal.show();

            });

          });
        });
    });

    /*if ( (document.getElementById('btnFinalizar') as HTMLAnchorElement) ) {
      (document.getElementById('btnFinalizar') as HTMLAnchorElement).addEventListener('click', function(event) {
        //event.preventDefault();
        showSpinner();
      });
    }*/
    

  </script>-->
</Layout>
